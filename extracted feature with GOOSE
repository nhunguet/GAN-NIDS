import pyshark
import pandas as pd
import math
import datetime
import calendar

def get_timestamp(goose_t):
    month = list(calendar.month_abbr).index(goose_t[0:3])
    day = int(goose_t[4:6])
    year = int(goose_t[8:12])
    hour = int(goose_t[13:15])
    min = int(goose_t[16:18])
    sec = float(goose_t[19:].split(' UTC')[0])
    return (year, month, day, hour, min, sec)

def get_linear_timestamp(goose_t):
    tm = get_timestamp(goose_t)
    dst = datetime.datetime(tm[0], tm[1], tm[2], tm[3], tm[4], int(math.floor(tm[5])), int((tm[5] - math.floor(tm[5])) * 1000000), tzinfo=datetime.timezone.utc)
    src = datetime.datetime(1990, 1, 1, 0, 0, 0, 0, tzinfo=datetime.timezone.utc)
    delta = dst - src
    return delta.days * (24 * 3600) + delta.seconds + delta.microseconds / 1000000.0

dataset = []
dmp = pyshark.FileCapture('goose.pcapng')
#print(dmp)
first_tm = None

for pkt in dmp:
    if pkt.highest_layer == 'GOOSE':
        tm = get_linear_timestamp(pkt.goose.t)
        dataset.append( {
            'appid': int(pkt.goose.appid, 0),
            'len': int(pkt.goose.length, 0),
            'path': str(pkt.goose.datSet),
            't': 0 if first_tm == None else tm - first_tm,
            'state': int(pkt.goose.stNum),
            'seq': int(pkt.goose.sqNum),
            'data_cnt': int(pkt.goose.numDatSetEntries)
        } )
        if first_tm == None:
            first_tm = tm

pd.DataFrame(dataset, columns=['appid', 'len', 'path', 't', 'state', 'seq', 'data_cnt']).to_csv('F:\GOOSE\dataset.csv', index=False)
